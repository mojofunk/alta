#!/usr/bin/env python

juce_linux_uselibs = ['ALSA', 'DL', 'FREETYPE2', 'GL', 'PTHREAD', 'X11', 'XEXT']

def check_required_deps(conf, deps):
    for pkg, version in deps.items():
        conf.check_cfg(package=pkg, atleast_version=version, mandatory=1)
        conf.check_cfg(package=pkg, args='--cflags --libs')

def configure(conf):

    if conf.env.TARGET_LINUX:
        linux_deps = \
            {
                'alsa': '1.0.28',
                'freetype2': '17.2.11',
                'gl': '10.4.7',
                'x11': '1.6.2',
                'xext': '1.3.3',
            }

        check_required_deps(conf, linux_deps)
        conf.check(compiler='c', lib='pthread', mandatory=True, uselib_store='PTHREAD')
        conf.check(compiler='c', lib='dl', mandatory=True, uselib_store='DL')

    elif conf.env.TARGET_WINDOWS:
        conf.check(lib='winmm', uselib_store='WINMM')
        conf.check(lib='ole32', uselib_store='OLE32')
        conf.check(lib='oleaut32', uselib_store='OLEAUT32')
        conf.check(lib='kernel32', uselib_store='KERNEL32')
        conf.check(lib='shell32', uselib_store='SHELL32')
        conf.check(lib='user32', uselib_store='USER32')
        conf.check(lib='wininet', uselib_store='WININET')
        conf.check(lib='advapi32', uselib_store='ADVAPI32')
        conf.check(lib='version', uselib_store='VERSION')
        conf.check(lib='shlwapi', uselib_store='SHLWAPI')
        conf.check(lib='gdi32', uselib_store='GDI32')
        conf.check(lib='comdlg32', uselib_store='COMDLG32')
        conf.check(lib='wsock32', uselib_store='WSOCK32')

def build_examples(bld):
    
    example_uselib_linux = ['FREETYPE2']

    example_use_shared = ['JUCE_SHARED']
    example_use_static = ['JUCE_STATIC']

    if bld.env.ENABLE_SHARED:
        bld.program(
            includes='.',
            use=example_use_shared,
            source=bld.path.ant_glob('JUCE/examples/HelloWorld/Source/*.cpp'),
            target='juce_example_hello_world'
            )

    if bld.env.ENABLE_STATIC:
        bld.program(
            includes='.',
            uselib=juce_linux_uselibs,
            use=example_use_static,
            source=bld.path.ant_glob('JUCE/examples/HelloWorld/Source/*.cpp'),
            target='juce_example_hello_world'
            )


    example_demo_source = bld.path.ant_glob('JUCE/examples/Demo/Source/*.cpp')
    example_demo_source += bld.path.ant_glob('JUCE/examples/Demo/Source/Demos/*.cpp')
    example_demo_source += bld.path.ant_glob('JUCE/examples/Demo/JuceLibraryCode/*.cpp')

    if bld.env.ENABLE_SHARED:
        bld.program(
            includes='.',
            uselib=juce_linux_uselibs,
            use=example_use_shared,
            source=example_demo_source,
            target='juce_example_demo'
            )

    if bld.env.ENABLE_STATIC:
        bld.program(
            includes='.',
            uselib=juce_linux_uselibs,
            use=example_use_static,
            source=example_demo_source,
            target='juce_example_demo'
            )

def build(bld):
    juce_includes = '''
    JUCE/modules/juce_audio_basics/juce_audio_basics.h
    JUCE/modules/juce_audio_devices/juce_audio_devices.h
    JUCE/modules/juce_audio_formats/juce_audio_formats.h
    JUCE/modules/juce_audio_processors/juce_audio_processors.h
    JUCE/modules/juce_audio_utils/juce_audio_utils.h
    JUCE/modules/juce_box2d/juce_box2d.h
    JUCE/modules/juce_core/juce_core.h
    JUCE/modules/juce_cryptography/juce_cryptography.h
    JUCE/modules/juce_data_structures/juce_data_structures.h
    JUCE/modules/juce_events/juce_events.h
    JUCE/modules/juce_graphics/juce_graphics.h
    JUCE/modules/juce_gui_basics/juce_gui_basics.h
    JUCE/modules/juce_gui_extra/juce_gui_extra.h
    JUCE/modules/juce_opengl/juce_opengl.h
    JUCE/modules/juce_video/juce_video.h
    '''

    juce_sources = '''
    JUCE/modules/juce_audio_basics/juce_audio_basics.cpp
    JUCE/modules/juce_audio_devices/juce_audio_devices.cpp
    JUCE/modules/juce_audio_formats/juce_audio_formats.cpp
    JUCE/modules/juce_audio_processors/juce_audio_processors.cpp
    JUCE/modules/juce_audio_utils/juce_audio_utils.cpp
    JUCE/modules/juce_box2d/juce_box2d.cpp
    JUCE/modules/juce_core/juce_core.cpp
    JUCE/modules/juce_cryptography/juce_cryptography.cpp
    JUCE/modules/juce_data_structures/juce_data_structures.cpp
    JUCE/modules/juce_events/juce_events.cpp
    JUCE/modules/juce_graphics/juce_graphics.cpp
    JUCE/modules/juce_gui_basics/juce_gui_basics.cpp
    JUCE/modules/juce_gui_extra/juce_gui_extra.cpp
    JUCE/modules/juce_opengl/juce_opengl.cpp
    JUCE/modules/juce_video/juce_video.cpp
    '''

    windows_includes = ['config/windows']
    linux_includes = ['config/linux']

    windows_uselibs = ['WINMM', 'OLE32', 'SHELL32', 'KERNEL32', 'GDI32', 'COMDLG32']
    windows_uselibs += ['USER32', 'WININET', 'ADVAPI32', 'VERSION', 'SHLWAPI']
    windows_uselibs += ['OLEAUT32', 'WSOCK32']

    juce_includes = ['JUCE']

    if bld.env.TARGET_WINDOWS:
        uselibs = windows_uselibs
        juce_includes += windows_includes
    else:
        uselibs = juce_linux_uselibs
        juce_includes += linux_includes

    if bld.env.ENABLE_SHARED:
        bld.shlib(
            includes=juce_includes,
            export_includes=juce_includes,
            uselib=uselibs,
            source=juce_sources,
            target='juce',
            name='JUCE_SHARED'
            )

    if bld.env.ENABLE_STATIC:
        bld.stlib(
            includes=juce_includes,
            export_includes=juce_includes,
            uselib=uselibs,
            source=juce_sources,
            target='juce',
            name='JUCE_STATIC'
            )

    build_examples(bld)
