#! /usr/bin/env python
# encoding: utf-8
# Tim Mayberry, 2008

tests = '''
test_application
test_boost_lockfree
test_core_initialize
test_cppformat
test_debug
test_engine
test_resource
test_ring_buffer
test_sequence
test_spinwait
test_state_tracker
test_string_convert
test_string_compose
test_string_pool
test_timing
test_type_system
test_graph
test_logging
test_observer
test_module_utils
test_fixed_size_object_pool
test_fixed_size_pool_allocator
test_project
test_private_macros
test_audio_clip
test_filesystem_paths
test_project_directory
test_file_utils
test_archive_modules
test_audiofile_modules
test_audio_driver_modules
test_audio_effect_modules
test_midi_driver_modules
test_cycle_timer
'''.split()

windows_tests = '''
test_windows_mmcss
test_windows_time_utils
'''.split()

all_test_sources = []

common_sources = ['test_common.cpp', 'example_application.cpp']

uselibs = [
    'BOOST_UNIT_TEST_FRAMEWORK',
    'BOOST_FILESYSTEM',
    'BOOST_SYSTEM',
    'GLIB-2.0',
    'GMODULE-2.0']

use_shared = [
    'MOJO_CORE_SHARED',
    'MOJO_ENGINE_SHARED',
    'MOJO_APPLICATION_SHARED']

use_static = [
    'MOJO_CORE_STATIC',
    'MOJO_ENGINE_STATIC',
    'MOJO_APPLICATION_STATIC']


def init():
    pass


def configure(conf):
    if not conf.env.BUILD_TESTS:
        return

    print ("configure mojo tests")


def build_single_tests_shared(bld):
    bld.shlib(
        source=common_sources,
        includes='.',
        defines='BOOST_TEST_DYN_LINK=1',
        uselib=uselibs,
        use=use_shared,
        target='mojo-test-common-shared',
        name='MOJO_TEST_COMMON_SHARED')

    for test in tests:
        bld.program(
            source=test + '.cpp',
            includes='.',
            defines='BOOST_TEST_DYN_LINK=1',
            uselib=uselibs,
            use=use_shared + ['MOJO_TEST_COMMON_SHARED'],
            target=test)


def build_tests_shared(bld):
    defines = ['BOOST_TEST_DYN_LINK=1',
               'MOJO_SINGLE_TEST_EXE=1']
    if bld.env.ENABLE_AMALGAMATION:
        defines += ['MOJO_AMALGAMATED']
        source = ['test_main.cpp']
    else:
        source = all_test_sources + common_sources + ['test_main.cpp']

    bld.program(
        includes='.',
        source=source,
        defines=defines,
        uselib=uselibs,
        use=use_shared,
        target='test_mojo')


def build_shared(bld):
    if bld.env.BUILD_SINGLE_TESTS:
        build_single_tests_shared(bld)
    else:
        build_tests_shared(bld)


def build_single_tests_static(bld):
    bld.stlib(
        source=common_sources,
        includes='.',
        defines='BOOST_TEST_DYN_LINK=1',
        uselib=uselibs,
        use=use_static,
        target='mojo-test-common-static',
        name='MOJO_TEST_COMMON_STATIC')

    for test in tests:
        bld.program(
            source=test + '.cpp',
            includes='.',
            defines='BOOST_TEST_DYN_LINK=1',
            uselib=uselibs,
            use=use_static + ['MOJO_TEST_COMMON_STATIC'],
            target=test + '_static')


def build_tests_static(bld):
    defines = ['BOOST_TEST_DYN_LINK=1',
               'MOJO_SINGLE_TEST_EXE=1']
    if bld.env.ENABLE_AMALGAMATION:
        defines += ['MOJO_AMALGAMATED']
        source = ['test_main.cpp']
    else:
        source = all_test_sources + common_sources + ['test_main.cpp']

    bld.program(
        includes='.',
        source=source,
        defines=defines,
        uselib=uselibs,
        use=use_static,
        target='test_mojo_static')


def build_static(bld):
    if bld.env.BUILD_SINGLE_TESTS:
        build_single_tests_static(bld)
    else:
        build_tests_static(bld)


def build(bld):
    if not bld.env.BUILD_TESTS:
        return

    local_tests = tests

    if bld.env.TARGET_PLATFORM == 'windows':
        local_tests += windows_tests

    for test in local_tests:
        all_test_sources.append(test + '.cpp')

    if bld.env.ENABLE_SHARED:
        build_shared(bld)

    if bld.env.ENABLE_STATIC:
        build_static(bld)
