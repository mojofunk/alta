Gui

Each class that represents some aspect of the gui should be defined by an
interface(even if that is done after the fact) and no toolkit specific
structures should be exposed in the interface/public api. In theory it should
abstract the functionality so that any GUI toolkit could be used and the class
api would stay the same.

The gui and engine separation must communicate through an interface that would
allow for the engine to be located in a different process or even different
system.

Server

The state of all objects is maintained on the server side. The clients can
manipulate or query that state via the client API. The state of a project is
stored and restored by the server.

Client API

All communication with the server/engine must go through the client API.

One option for this would be to define a command class structure where
a controller(gui in this case) creates a command containing a reference to the
class and an operation to perform on that class(with arguments if any).

Commands should not be created in gui code. Another interface should hide the
implementation of command generation and asyncronous response etc.

Each command would need a unique identifier generated by the client side for
the server to use in the response?

preferably the command interface would be very similar to libsigc++

The client API should only communicate with the gui/controller via one
thread.

The gui must "connect" to the engine and provide an object that can be used
for communication. This "object" is used to ensure that any messages sent by
the engine are executed in the thread of the gui/controller.

when the server is in-process the command should not have to be converted from
a functor with bound arguments etc. to some serialized form.

The base functionality of classes should assume a single thread model and not
use locking. If a class is used in a multi-threaded environment then locking
can be performed externally.

